{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, ScaledSvg, Html } from 'layercake';\n  import { scaleBand } from 'd3-scale';\n\n  import Bar from './components/Bar.svelte';\n  import AxisX from './components/AxisX.html.svelte';\n  import AxisY from './components/AxisY.html.svelte';\n\n  // This example loads csv data as json using @rollup/plugin-dsv\n  import data from './data/groups.csv';\n\n  data.forEach(d => {\n    d.value = +d.value;\n  });\n</script>\n\n<style>\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n    ssr={true}\n    percentRange={true}\n    padding={{ top: 0, right: 20, bottom: 20, left: 30 }}\n    x='value'\n    y='year'\n    yScale={scaleBand().paddingInner([0.05]).round(true)}\n    yDomain={['1979', '1980', '1981', '1982', '1983']}\n    xDomain={[0, null]}\n    data={data}\n  >\n    <Html>\n      <AxisX\n        gridlines={true}\n        baseline={true}\n        snapTicks={true}\n      />\n      <AxisY gridlines={false}/>\n    </Html>\n    <ScaledSvg>\n      <Bar/>\n    </ScaledSvg>\n  </LayerCake>\n\n</div>"},"dek":"Since we want an ordinal y-axis and Layer Cake defaults to a linear scale, pass in a custom scale to `yScale` with a few formatting options. Set the x-scale to always start at `0` so you don't show misleading differences between groups.\n","components":[{"title":"./components/Bar.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet, xScale, yScale } = getContext('LayerCake');\n  export let fill = '#00bbff';\n</script>\n\n<g class=\"bar-group\">\n  {#each $data as d, i}\n    <rect\n      class='group-rect'\n      data-id=\"{i}\"\n      x=\"{$xScale.range()[0]}\"\n      y=\"{$yGet(d)}\"\n      height={$yScale.bandwidth()}\n      width=\"{$xGet(d)}\"\n      {fill}\n    ></rect>\n  {/each}\n</g>"},{"title":"./components/AxisX.html.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yScale, padding } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let formatTick = d => d;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let ticks = undefined;\n  export let yTick = 7;\n  export let dyTick = 0;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $xScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($xScale.ticks()) :\n          $xScale.ticks(ticks);\n</script>\n\n<div class='axis x-axis' class:snapTicks>\n  {#each tickVals as tick, i}\n    {#if gridlines !== false}\n      <div class=\"gridline\" style='left:{$xScale(tick)}%;top: -{$padding.top}px;bottom: 0;'></div>\n    {/if}\n    <div\n      class='tick tick-{ i }'\n      style='left:{$xScale(tick) + (isBandwidth ? $xScale.bandwidth() / 2 : 0)}%;top:100%;'>\n      <div\n        class=\"text\"\n        style='top:{(yTick + dyTick)}px;'>{formatTick(tick)}</div>\n    </div>\n  {/each}\n  {#if baseline === true}\n    <div class=\"baseline\" style='top: 100%;width: 100%;'></div>\n  {/if}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .gridline,\n  .baseline {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .gridline {\n    border-left: 1px dashed #aaa;\n  }\n\n  .baseline {\n    border-top: 1px solid #aaa;\n  }\n\n  .tick .text {\n    color: #666;\n    position: relative;\n    white-space: nowrap;\n    transform: translateX(-50%);\n  }\n  .axis.snapTicks .tick:last-child {\n    transform: translateX(-50%);\n  }\n  .axis.snapTicks .tick:first-child {\n    transform: translateX(50%);\n  }\n</style>"},{"title":"./components/AxisY.html.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { padding, xRange, xScale, yScale } = getContext('LayerCake');\n\n  export let ticks = 4;\n  export let gridlines = true;\n  export let baseline = false;\n  export let formatTick = d => d;\n  export let xTick = -4;\n  export let yTick = 2;\n  // export let dxTick = 0;\n  // export let dyTick = -4;\n  // export let textAnchor = 'start';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $yScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($yScale.ticks()) :\n          $yScale.ticks(ticks);\n</script>\n\n<div class='axis y-axis' style='transform:translate(-{$padding.left}px, 0)'>\n  {#each tickVals as tick, i}\n    <div class='tick tick-{i}' style='top:{$yScale(tick) + (isBandwidth ? $yScale.bandwidth () / 2 : 0)}%;left:{$xRange[0]}%;'>\n      {#if gridlines !== false}\n        <div class=\"gridline\" style='top:0;left:{isBandwidth ? $padding.left : 0}px;right:-{$padding.left + $padding.right}px;'></div>\n      {/if}\n      {#if baseline !== false && i === 0}\n        <div class=\"gridline baseline\" style='top:0;left:{isBandwidth ? $padding.left : 0};right:-{$padding.left + $padding.right}px;'></div>\n      {/if}\n      <div\n        class=\"text\"\n        style='\n          top:{yTick - 3}px;\n          left:{isBandwidth ? ($padding.left + xTick) : 0}px;\n          transform: translate({isBandwidth ? '-100%' : 0}, {isBandwidth ? -50 - Math.floor($yScale.bandwidth() / -2) : '-100'}%);\n        '\n      >{formatTick(tick)}</div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .gridline,\n  .baseline,\n  .text {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: 12px;\n    width: 100%;\n    font-weight: 100;\n  }\n\n  .gridline {\n    border-top: 1px dashed #aaa;\n  }\n\n  .baseline.gridline {\n    border-top-style: solid;\n  }\n\n  .tick .text {\n    color: #666;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./data/groups.csv","contents":"year,value\n1979,2\n1980,3\n1981,5\n1982,8\n1983,18"}]}