{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, ScaledSvg, Html, flatten } from 'layercake';\n  import { stack } from 'd3-shape';\n  import { scaleBand, scaleOrdinal } from 'd3-scale';\n  import { format, precisionFixed } from 'd3-format';\n\n  import BarStacked from './components/BarStacked.svelte';\n  import AxisX from './components/AxisX.html.svelte';\n  import AxisY from './components/AxisY.html.svelte';\n\n  // This example loads csv data as json using @rollup/plugin-dsv\n  import data from './data/fruitOrdinal.csv';\n\n  const xKey = 'year';\n  const yKey = [0, 1];\n  const zKey = 'key';\n\n  const seriesNames = Object.keys(data[0]).filter(d => d !== xKey);\n  const seriesColors = ['#00bbff', '#8bcef6', '#c4e2ed', '#f7f6e3'];\n\n  data.forEach(d => {\n    seriesNames.forEach(name => {\n      d[name] = +d[name];\n    });\n  });\n\n  const stackData = stack()\n    .keys(seriesNames);\n\n  const series = stackData(data);\n\n  const formatTickX = d => format(`.${precisionFixed(d)}s`)(d);\n</script>\n\n<style>\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n    ssr={true}\n    percentRange={true}\n    padding={{ top: 0, right: 0, bottom: 20, left: 30 }}\n    y={d => d.data[xKey]}\n    x={yKey}\n    z={zKey}\n    yScale={scaleBand().paddingInner([0.05]).round(true)}\n    yDomain={['2016', '2017', '2018', '2019']}\n    zScale={scaleOrdinal()}\n    zDomain={seriesNames}\n    zRange={seriesColors}\n    flatData={flatten(series)}\n    data={series}\n  >\n    <Html>\n      <AxisX\n        baseline={true}\n        snapTicks={true}\n        formatTick={formatTickX}\n      />\n      <AxisY\n        gridlines={false}\n      />\n    </Html>\n    <ScaledSvg>\n      <BarStacked/>\n    </ScaledSvg>\n  </LayerCake>\n\n</div>"},"dek":"","components":[{"title":"./components/BarStacked.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n  import { scaleOrdinal } from 'd3-scale';\n\n  const { data, xGet, yGet, zGet, yScale, custom } = getContext('LayerCake');\n\n  $: columnWidth = d => {\n    const xVals = $xGet(d);\n    return xVals[1] - xVals[0];\n  };\n</script>\n\n<g class=\"bar-group\">\n  {#each $data as series}\n    {#each series as d, i}\n      <rect\n        class='group-rect'\n        data-id=\"{i}\"\n        x=\"{$xGet(d)[0]}\"\n        y=\"{$yGet(d)}\"\n        height={$yScale.bandwidth()}\n        width=\"{columnWidth(d)}\"\n        fill={$zGet(series)}\n      ></rect>\n    {/each}\n  {/each}\n</g>"},{"title":"./components/AxisX.html.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yScale, padding } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let formatTick = d => d;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let ticks = undefined;\n  export let yTick = 7;\n  export let dyTick = 0;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $xScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($xScale.ticks()) :\n          $xScale.ticks(ticks);\n</script>\n\n<div class='axis x-axis' class:snapTicks>\n  {#each tickVals as tick, i}\n    {#if gridlines !== false}\n      <div class=\"gridline\" style='left:{$xScale(tick)}%;top: -{$padding.top}px;bottom: 0;'></div>\n    {/if}\n    <div\n      class='tick tick-{ i }'\n      style='left:{$xScale(tick) + (isBandwidth ? $xScale.bandwidth() / 2 : 0)}%;top:100%;'>\n      <div\n        class=\"text\"\n        style='top:{(yTick + dyTick)}px;'>{formatTick(tick)}</div>\n    </div>\n  {/each}\n  {#if baseline === true}\n    <div class=\"baseline\" style='top: 100%;width: 100%;'></div>\n  {/if}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .gridline,\n  .baseline {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .gridline {\n    border-left: 1px dashed #aaa;\n  }\n\n  .baseline {\n    border-top: 1px solid #aaa;\n  }\n\n  .tick .text {\n    color: #666;\n    position: relative;\n    white-space: nowrap;\n    transform: translateX(-50%);\n  }\n  .axis.snapTicks .tick:last-child {\n    transform: translateX(-50%);\n  }\n  .axis.snapTicks .tick:first-child {\n    transform: translateX(50%);\n  }\n</style>"},{"title":"./components/AxisY.html.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { padding, xRange, xScale, yScale } = getContext('LayerCake');\n\n  export let ticks = 4;\n  export let gridlines = true;\n  export let baseline = false;\n  export let formatTick = d => d;\n  export let xTick = -4;\n  export let yTick = 2;\n  // export let dxTick = 0;\n  // export let dyTick = -4;\n  // export let textAnchor = 'start';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $yScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($yScale.ticks()) :\n          $yScale.ticks(ticks);\n</script>\n\n<div class='axis y-axis' style='transform:translate(-{$padding.left}px, 0)'>\n  {#each tickVals as tick, i}\n    <div class='tick tick-{i}' style='top:{$yScale(tick) + (isBandwidth ? $yScale.bandwidth () / 2 : 0)}%;left:{$xRange[0]}%;'>\n      {#if gridlines !== false}\n        <div class=\"gridline\" style='top:0;left:{isBandwidth ? $padding.left : 0}px;right:-{$padding.left + $padding.right}px;'></div>\n      {/if}\n      {#if baseline !== false && i === 0}\n        <div class=\"gridline baseline\" style='top:0;left:{isBandwidth ? $padding.left : 0};right:-{$padding.left + $padding.right}px;'></div>\n      {/if}\n      <div\n        class=\"text\"\n        style='\n          top:{yTick - 3}px;\n          left:{isBandwidth ? ($padding.left + xTick) : 0}px;\n          transform: translate({isBandwidth ? '-100%' : 0}, {isBandwidth ? -50 - Math.floor($yScale.bandwidth() / -2) : '-100'}%);\n        '\n      >{formatTick(tick)}</div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .gridline,\n  .baseline,\n  .text {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: 12px;\n    width: 100%;\n    font-weight: 100;\n  }\n\n  .gridline {\n    border-top: 1px dashed #aaa;\n  }\n\n  .baseline.gridline {\n    border-top-style: solid;\n  }\n\n  .tick .text {\n    color: #666;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./data/fruitOrdinal.csv","contents":"year,apples,bananas,cherries,dates\n2019,3840,1920,960,400\n2018,1600,1440,960,400\n2017,820,1000,640,400\n2016,820,560,720,400"}]}