{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, Html } from 'layercake';\n\n  import Scatter from './components/Scatter.html.svelte';\n  import AxisX from './components/AxisX.html.svelte';\n  import AxisY from './components/AxisY.html.svelte';\n\n  // This example loads csv data as json using @rollup/plugin-dsv\n  import data from './data/points.csv';\n\n  const xKey = 'myX';\n  const yKey = 'myY';\n\n  data.forEach(d => {\n    d[yKey] = +d[yKey];\n  });\n\n  const r = 4.5;\n  const padding = 2.5;\n  const fill = '#fff';\n  const stroke = '#0cf';\n  const strokeWidth = 1.5;\n</script>\n\n<style>\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n    ssr={true}\n    percentRange={true}\n    padding={{ top: 10, right: 5, bottom: 20, left: 25 }}\n    x={xKey}\n    y={yKey}\n    xPadding={[padding, padding]}\n    yPadding={[padding, padding]}\n    data={data}\n  >\n\n    <Html>\n      <AxisX/>\n      <AxisY/>\n      <Scatter\n        {r}\n        {fill}\n        {stroke}\n        {strokeWidth}\n      />\n    </Html>\n\n  </LayerCake>\n</div>"},"dek":"","components":[{"title":"./components/Scatter.html.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet, xScale, yScale } = getContext('LayerCake');\n\n  export let r = 5;\n  export let fill = '#000';\n  export let stroke = '#0cf';\n  export let strokeWidth = 0;\n  // export let dx = 0;\n  // export let dy = 0;\n</script>\n\n<div class=\"scatter-group\">\n  {#each $data as d}\n    <div\n      class=\"circle\"\n      style=\"\n        left: {$xGet(d)+ ($xScale.bandwidth ? $xScale.bandwidth() / 2 : 0)}%;\n        top: {$yGet(d) + ($yScale.bandwidth ? $yScale.bandwidth() / 2 : 0)}%;\n        width: {r * 2}px;\n        height: {r * 2}px;\n        background-color: {fill};\n        border: {strokeWidth}px solid {stroke};\n      \"\n    />\n  {/each}\n</div>\n\n<style>\n  .circle {\n    position: absolute;\n    transform: translate(-50%, -50%);\n    border-radius: 50%;\n  }\n</style>"},{"title":"./components/AxisX.html.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yScale, padding } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let formatTick = d => d;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let ticks = undefined;\n  export let yTick = 7;\n  export let dyTick = 0;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $xScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($xScale.ticks()) :\n          $xScale.ticks(ticks);\n</script>\n\n<div class='axis x-axis' class:snapTicks>\n  {#each tickVals as tick, i}\n    {#if gridlines !== false}\n      <div class=\"gridline\" style='left:{$xScale(tick)}%;top: -{$padding.top}px;bottom: 0;'></div>\n    {/if}\n    <div\n      class='tick tick-{ i }'\n      style='left:{$xScale(tick) + (isBandwidth ? $xScale.bandwidth() / 2 : 0)}%;top:100%;'>\n      <div\n        class=\"text\"\n        style='top:{(yTick + dyTick)}px;'>{formatTick(tick)}</div>\n    </div>\n  {/each}\n  {#if baseline === true}\n    <div class=\"baseline\" style='top: 100%;width: 100%;'></div>\n  {/if}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .gridline,\n  .baseline {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .gridline {\n    border-left: 1px dashed #aaa;\n  }\n\n  .baseline {\n    border-top: 1px solid #aaa;\n  }\n\n  .tick .text {\n    color: #666;\n    position: relative;\n    white-space: nowrap;\n    transform: translateX(-50%);\n  }\n  .axis.snapTicks .tick:last-child {\n    transform: translateX(-50%);\n  }\n  .axis.snapTicks .tick:first-child {\n    transform: translateX(50%);\n  }\n</style>"},{"title":"./components/AxisY.html.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { padding, xRange, xScale, yScale } = getContext('LayerCake');\n\n  export let ticks = 4;\n  export let gridlines = true;\n  export let baseline = false;\n  export let formatTick = d => d;\n  export let xTick = -4;\n  export let yTick = 2;\n  // export let dxTick = 0;\n  // export let dyTick = -4;\n  // export let textAnchor = 'start';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $yScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($yScale.ticks()) :\n          $yScale.ticks(ticks);\n</script>\n\n<div class='axis y-axis' style='transform:translate(-{$padding.left}px, 0)'>\n  {#each tickVals as tick, i}\n    <div class='tick tick-{i}' style='top:{$yScale(tick) + (isBandwidth ? $yScale.bandwidth () / 2 : 0)}%;left:{$xRange[0]}%;'>\n      {#if gridlines !== false}\n        <div class=\"gridline\" style='top:0;left:{isBandwidth ? $padding.left : 0}px;right:-{$padding.left + $padding.right}px;'></div>\n      {/if}\n      {#if baseline !== false && i === 0}\n        <div class=\"gridline baseline\" style='top:0;left:{isBandwidth ? $padding.left : 0};right:-{$padding.left + $padding.right}px;'></div>\n      {/if}\n      <div\n        class=\"text\"\n        style='\n          top:{yTick - 3}px;\n          left:{isBandwidth ? ($padding.left + xTick) : 0}px;\n          transform: translate({isBandwidth ? '-100%' : 0}, {isBandwidth ? -50 - Math.floor($yScale.bandwidth() / -2) : '-100'}%);\n        '\n      >{formatTick(tick)}</div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .gridline,\n  .baseline,\n  .text {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: 12px;\n    width: 100%;\n    font-weight: 100;\n  }\n\n  .gridline {\n    border-top: 1px dashed #aaa;\n  }\n\n  .baseline.gridline {\n    border-top-style: solid;\n  }\n\n  .tick .text {\n    color: #666;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./data/points.csv","contents":"myX,myY\n1979,7.19\n1980,7.83\n1981,7.24\n1982,7.44\n1983,7.51\n1984,7.1\n1985,6.91\n1986,7.53\n1987,7.47\n1988,7.48\n1989,7.03\n1990,6.23\n1991,6.54\n1992,7.54\n1993,6.5\n1994,7.18\n1995,6.12\n1996,7.87\n1997,6.73\n1998,6.55\n1999,6.23\n2000,6.31\n2001,6.74\n2002,5.95\n2003,6.13\n2004,6.04\n2005,5.56\n2006,5.91\n2007,4.29\n2008,4.72\n2009,5.38\n2010,4.92\n2011,4.61\n2012,3.62\n2013,5.35\n2014,5.28\n2015,4.63\n2016,4.72"}]}