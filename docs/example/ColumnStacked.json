{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, Svg, flatten, uniques } from 'layercake';\n  import { stack } from 'd3-shape';\n  import { scaleBand, scaleOrdinal } from 'd3-scale';\n  import { format, precisionFixed } from 'd3-format';\n\n  import ColumnStacked from './components/ColumnStacked.svelte';\n  import AxisX from './components/AxisX.svelte';\n  import AxisY from './components/AxisY.svelte';\n\n  // This example loads csv data as json using rollup-plugin-dsv\n  import data from './data/fruitOrdinal.csv';\n\n  const xKey = 'year';\n  const yKey = [0, 1];\n  const zKey = 'key';\n\n  const seriesNames = Object.keys(data[0]).filter(d => d !== xKey);\n  const seriesColors = ['#00e047', '#7ceb68', '#b7f486', '#ecfda5'];\n\n  data.forEach(d => {\n    seriesNames.forEach(name => {\n      d[name] = +d[name];\n    });\n  });\n\n  const stackData = stack()\n    .keys(seriesNames);\n\n  const series = stackData(data);\n\n  const formatTickY = d => format(`.${precisionFixed(d)}s`)(d);\n</script>\n\n<style>\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n       padding={{ top: 0, right: 0, bottom: 20, left: 20 }}\n       x={d => d.data[xKey]}\n       y={yKey}\n       z={zKey}\n       xScale={scaleBand().paddingInner([0.02]).round(true)}\n       xDomain={uniques(data, xKey)}\n      zScale={scaleOrdinal()}\n      zDomain={seriesNames}\n      zRange={seriesColors}\n       flatData={flatten(series)}\n       data={series}\n  >\n    <Svg>\n      <AxisX\n        gridlines={false}\n      />\n      <AxisY\n        ticks={4}\n        gridlines={false}\n        formatTick={formatTickY}\n      />\n      <ColumnStacked/>\n    </Svg>\n  </LayerCake>\n\n</div>"},"dek":"","components":[{"title":"./components/ColumnStacked.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n  import { scaleOrdinal } from 'd3-scale';\n\n  const { data, xGet, yGet, zGet, xScale, custom } = getContext('LayerCake');\n\n  $: columnHeight = d => {\n    const yVals = $yGet(d);\n    return yVals[0] - yVals[1];\n  };\n</script>\n\n<g class=\"column-group\">\n  {#each $data as series, i}\n    {#each series as d}\n      <rect\n        class='group-rect'\n        data-id=\"{i}\"\n        x=\"{$xGet(d)}\"\n        y=\"{$yGet(d)[1]}\"\n        width={$xScale.bandwidth()}\n        height=\"{columnHeight(d)}\"\n        fill={$zGet(series)}\n      ></rect>\n    {/each}\n  {/each}\n</g>"},{"title":"./components/AxisX.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yScale, yRange } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let formatTick = d => d;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let ticks = undefined;\n  export let xTick = undefined;\n  export let yTick = 16;\n  export let dxTick = 0;\n  export let dyTick = 0;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $xScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($xScale.ticks()) :\n          $xScale.ticks(ticks);\n\n  function textAnchor(i) {\n    if (snapTicks === true) {\n      if (i === 0) {\n        return 'start';\n      }\n      if (i === tickVals.length - 1) {\n        return 'end';\n      }\n    }\n    return 'middle';\n  }\n</script>\n\n<g class='axis x-axis'>\n  {#each tickVals as tick, i}\n    <g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yRange[0]})'>\n      {#if gridlines !== false}\n        <line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n      {/if}\n      <text\n        x=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0 }\"\n        y='{yTick}'\n        dx='{dxTick}'\n        dy='{dyTick}'\n        text-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n    </g>\n  {/each}\n  {#if baseline === true}\n    <line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n  {/if}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .baseline {\n    stroke-dasharray: 0;\n  }\n</style>"},{"title":"./components/AxisY.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { padding, xRange, xScale, yScale } = getContext('LayerCake');\n\n  export let ticks = 4;\n  export let gridlines = true;\n  export let formatTick = d => d;\n  export let xTick = 0;\n  export let yTick = 0;\n  export let dxTick = 0;\n  export let dyTick = -4;\n  export let textAnchor = 'start';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $yScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($yScale.ticks()) :\n          $yScale.ticks(ticks);\n</script>\n\n<g class='axis y-axis' transform='translate({-$padding.left}, 0)'>\n  {#each tickVals as tick, i}\n    <g class='tick tick-{tick}' transform='translate({$xRange[0] + (isBandwidth ? $padding.left : 0)}, {$yScale(tick)})'>\n      {#if gridlines !== false}\n        <line\n          x2='100%'\n          y1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n          y2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n        ></line>\n      {/if}\n      <text\n        x='{xTick}'\n        y='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}'\n        dx='{isBandwidth ? -5 : dxTick}'\n        dy='{isBandwidth ? 4 : dyTick}'\n        style=\"text-anchor:{isBandwidth ? 'end' : textAnchor};\"\n      >{formatTick(tick)}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./data/fruitOrdinal.csv","contents":"year,apples,bananas,cherries,dates\n2019,3840,1920,960,400\n2018,1600,1440,960,400\n2017,820,1000,640,400\n2016,820,560,720,400"}]}